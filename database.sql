																	 -- =============================================
-- SAFELY DROP CONSTRAINTS FIRST
-- =============================================

IF OBJECT_ID('dbo.CONTAS_A_PAGAR', 'U') IS NOT NULL
BEGIN
    ALTER TABLE CONTAS_A_PAGAR DROP CONSTRAINT IF EXISTS FK_ContasAPagar_NotaEntrada;
    ALTER TABLE CONTAS_A_PAGAR DROP CONSTRAINT IF EXISTS FK_ContasAPagar_Fornecedor;
    ALTER TABLE CONTAS_A_PAGAR DROP CONSTRAINT IF EXISTS FK_ContasAPagar_FormaPagamento;
END

IF OBJECT_ID('dbo.ITENS_NOTA_ENTRADA', 'U') IS NOT NULL
BEGIN
    ALTER TABLE ITENS_NOTA_ENTRADA DROP CONSTRAINT IF EXISTS FK_ITEMNOTA_NOTAENTRADA;
    ALTER TABLE ITENS_NOTA_ENTRADA DROP CONSTRAINT IF EXISTS FK_ITEMNOTA_PRODUTO;
    ALTER TABLE ITENS_NOTA_ENTRADA DROP CONSTRAINT IF EXISTS FK_ITEMNOTA_USR_ALT;
END

IF OBJECT_ID('dbo.NOTA_ENTRADA', 'U') IS NOT NULL
BEGIN
    ALTER TABLE NOTA_ENTRADA DROP CONSTRAINT IF EXISTS FK_NOTAENTRADA_FORNECEDOR;
    ALTER TABLE NOTA_ENTRADA DROP CONSTRAINT IF EXISTS FK_NOTAENTRADA_CONDPAG;
    ALTER TABLE NOTA_ENTRADA DROP CONSTRAINT IF EXISTS FK_NOTAENTRADA_USR_ALT;
END


IF OBJECT_ID('dbo.PRODUTO_FORNECEDOR', 'U') IS NOT NULL
BEGIN
    ALTER TABLE PRODUTO_FORNECEDOR DROP CONSTRAINT IF EXISTS FK_PRODFORN_PRODUTO;
    ALTER TABLE PRODUTO_FORNECEDOR DROP CONSTRAINT IF EXISTS FK_PRODFORN_FORNECEDOR;
    ALTER TABLE PRODUTO_FORNECEDOR DROP CONSTRAINT IF EXISTS UQ_PRODUTO_FORNECEDOR;
END

IF OBJECT_ID('dbo.PRODUTO', 'U') IS NOT NULL
BEGIN
    ALTER TABLE PRODUTO DROP CONSTRAINT IF EXISTS FK_PROD_UNIDADE;
    ALTER TABLE PRODUTO DROP CONSTRAINT IF EXISTS FK_PROD_CATEGORIA;
    ALTER TABLE PRODUTO DROP CONSTRAINT IF EXISTS FK_PROD_MARCA;
    ALTER TABLE PRODUTO DROP CONSTRAINT IF EXISTS FK_PROD_USR_ALT;
END

IF OBJECT_ID('dbo.MARCA', 'U') IS NOT NULL
BEGIN
    ALTER TABLE MARCA DROP CONSTRAINT IF EXISTS FK_MARCA_USR_ALT;
END

IF OBJECT_ID('dbo.CATEGORIA', 'U') IS NOT NULL
BEGIN
    ALTER TABLE CATEGORIA DROP CONSTRAINT IF EXISTS FK_CATEGORIA_USR_ALT;
END

IF OBJECT_ID('dbo.UNIDADE_MEDIDA', 'U') IS NOT NULL
BEGIN
    ALTER TABLE UNIDADE_MEDIDA DROP CONSTRAINT IF EXISTS FK_UNMEDIDA_USR_ALT;
END

IF OBJECT_ID('dbo.PARCELA_CONDPAG', 'U') IS NOT NULL
BEGIN
    ALTER TABLE PARCELA_CONDPAG DROP CONSTRAINT IF EXISTS FK_PARCELA_CONDPAG;
    ALTER TABLE PARCELA_CONDPAG DROP CONSTRAINT IF EXISTS FK_PARCELA_FORMAPAG;
    ALTER TABLE PARCELA_CONDPAG DROP CONSTRAINT IF EXISTS FK_PARCELA_CONDPAG_USR_ALT;
END

IF OBJECT_ID('dbo.CLIENTE', 'U') IS NOT NULL
BEGIN
    ALTER TABLE CLIENTE DROP CONSTRAINT IF EXISTS FK_CLIENTE_CIDADE;
    ALTER TABLE CLIENTE DROP CONSTRAINT IF EXISTS FK_CLIENTE_CONDPAG;
    ALTER TABLE CLIENTE DROP CONSTRAINT IF EXISTS FK_CLIENTE_USR_ALT;
END

IF OBJECT_ID('dbo.FORNECEDOR', 'U') IS NOT NULL
BEGIN
    ALTER TABLE FORNECEDOR DROP CONSTRAINT IF EXISTS FK_FORNECEDOR_CIDADE;
    ALTER TABLE FORNECEDOR DROP CONSTRAINT IF EXISTS FK_FORNECEDOR_CONDPAG;
    ALTER TABLE FORNECEDOR DROP CONSTRAINT IF EXISTS FK_FORNECEDOR_USR_ALT;
END

IF OBJECT_ID('dbo.FUNCIONARIO', 'U') IS NOT NULL
BEGIN
    ALTER TABLE FUNCIONARIO DROP CONSTRAINT IF EXISTS FK_FUNCIONARIO_CIDADE;
    ALTER TABLE FUNCIONARIO DROP CONSTRAINT IF EXISTS FK_FUNCIONARIO_USR_ALT;
END

IF OBJECT_ID('dbo.COND_PAGAMENTO', 'U') IS NOT NULL
    ALTER TABLE COND_PAGAMENTO DROP CONSTRAINT IF EXISTS FK_CONDPAG_USR_ALT;

IF OBJECT_ID('dbo.FORMA_PAGAMENTO', 'U') IS NOT NULL
    ALTER TABLE FORMA_PAGAMENTO DROP CONSTRAINT IF EXISTS FK_FORMAPAG_USR_ALT;

IF OBJECT_ID('dbo.PAIS', 'U') IS NOT NULL
    ALTER TABLE PAIS DROP CONSTRAINT IF EXISTS FK_PAIS_USR_ALT;

IF OBJECT_ID('dbo.ESTADO', 'U') IS NOT NULL
BEGIN
    ALTER TABLE ESTADO DROP CONSTRAINT IF EXISTS FK_ESTADO_PAIS;
    ALTER TABLE ESTADO DROP CONSTRAINT IF EXISTS FK_ESTADO_USR_ALT;
END

IF OBJECT_ID('dbo.CIDADE', 'U') IS NOT NULL
BEGIN
    ALTER TABLE CIDADE DROP CONSTRAINT IF EXISTS FK_CIDADE_ESTADO;
    ALTER TABLE CIDADE DROP CONSTRAINT IF EXISTS FK_CIDADE_USR_ALT;
END

-- =============================================
-- DROP TABLES IN CORRECT ORDER (children first)
-- =============================================
-- NEW: Dropping new tables
DROP TABLE IF EXISTS CONTAS_A_PAGAR;
DROP TABLE IF EXISTS ITENS_NOTA_ENTRADA;
DROP TABLE IF EXISTS NOTA_ENTRADA;

DROP TABLE IF EXISTS PRODUTO_FORNECEDOR;
DROP TABLE IF EXISTS PRODUTO;
DROP TABLE IF EXISTS MARCA;
DROP TABLE IF EXISTS CATEGORIA;
DROP TABLE IF EXISTS UNIDADE_MEDIDA;

DROP TABLE IF EXISTS FORNECEDOR;
DROP TABLE IF EXISTS CLIENTE;
DROP TABLE IF EXISTS PARCELA_CONDPAG;
DROP TABLE IF EXISTS FORMA_PAGAMENTO;
DROP TABLE IF EXISTS COND_PAGAMENTO;
DROP TABLE IF EXISTS FUNCIONARIO;
DROP TABLE IF EXISTS CIDADE;
DROP TABLE IF EXISTS ESTADO;
DROP TABLE IF EXISTS PAIS;
GO

-- =============================================
-- CREATE DATABASE (if needed)
-- =============================================
IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'projeto_pratica')
    CREATE DATABASE projeto_pratica;
GO

USE projeto_pratica;
GO

-- ============ TABELAS BASE ============

-- PAIS
CREATE TABLE PAIS (
    PAIS_ID INT IDENTITY(1,1) PRIMARY KEY,
    PAIS_NOME NVARCHAR(255) NOT NULL,
    PAIS_SIGLA NVARCHAR(10),
    PAIS_MOEDA NVARCHAR(50),
    PAIS_DDI NVARCHAR(10),
    ATIVO BIT DEFAULT 1,
    PAIS_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    PAIS_DT_ALT DATETIME,
    PAIS_USR_ALT INT
);
GO

-- ESTADO
CREATE TABLE ESTADO (
    ESTADO_ID INT IDENTITY(1,1) PRIMARY KEY,
    ESTADO_NOME NVARCHAR(255) NOT NULL,
    ESTADO_UF NVARCHAR(5) NOT NULL,
    PAIS_ID INT NOT NULL,
    ATIVO BIT DEFAULT 1,
    ESTADO_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    ESTADO_DT_ALT DATETIME,
    ESTADO_USR_ALT INT
);
GO

-- CIDADE
CREATE TABLE CIDADE (
    CIDADE_ID INT IDENTITY(1,1) PRIMARY KEY,
    CIDADE_NOME NVARCHAR(255) NOT NULL,
    CIDADE_DDD NVARCHAR(5),
    ESTADO_ID INT NOT NULL,
    ATIVO BIT DEFAULT 1,
    CIDADE_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    CIDADE_DT_ALT DATETIME,
    CIDADE_USR_ALT INT
);
GO

-- FUNCIONARIO
CREATE TABLE FUNCIONARIO (
    FUNCIONARIO_ID INT IDENTITY(1,1) PRIMARY KEY,
    FUNCIONARIO_TIPO CHAR(1) NOT NULL,
    FUNCIONARIO_NOME NVARCHAR(255) NOT NULL,
    FUNCIONARIO_APELIDO VARCHAR(255),
    FUNCIONARIO_NASCIMENTO DATE NOT NULL,
    FUNCIONARIO_CPF VARCHAR(20) NOT NULL,
    FUNCIONARIO_RG VARCHAR(20),
    FUNCIONARIO_EMAIL NVARCHAR(255),
    FUNCIONARIO_TELEFONE NVARCHAR(20),
    FUNCIONARIO_ENDERECO NVARCHAR(255),
    FUNCIONARIO_NUM VARCHAR(10),
    FUNCIONARIO_COMPLEMENTO VARCHAR(100),
    FUNCIONARIO_BAIRRO NVARCHAR(100),
    FUNCIONARIO_CEP NVARCHAR(15),
    FUNCIONARIO_MATRICULA NVARCHAR(50),
    FUNCIONARIO_CARGO NVARCHAR(100),
    FUNCIONARIO_SALBRUTO FLOAT,
    FUNCIONARIO_GRATPROD FLOAT,
    FUNCIONARIO_SALLIQ FLOAT,
    FUNCIONARIO_DATA_ADMISSAO DATE,
    FUNCIONARIO_DATA_DEMISSAO DATE,
    FUNCIONARIO_TURNO NVARCHAR(50),
    FUNCIONARIO_CARGA_HORARIA INT,
    CIDADE_ID INT NOT NULL,
    ATIVO BIT DEFAULT 1,
    FUNCIONARIO_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    FUNCIONARIO_DT_ALT DATETIME,
    FUNCIONARIO_USR_ALT INT
);
GO

-- COND_PAGAMENTO
CREATE TABLE COND_PAGAMENTO (
    CONDPAG_ID INT IDENTITY(1,1) PRIMARY KEY,
    CONDPAG_DESC NVARCHAR(255) NOT NULL,
    CONDPAG_PARCELAS INT NOT NULL,
    CONDPAG_JURO DECIMAL(5,2) NOT NULL,
    CONDPAG_MULTA DECIMAL(5,2) NOT NULL,
    CONDPAG_DESCONTO DECIMAL(5,2) NOT NULL,
    ATIVO BIT DEFAULT 1,
    CONDPAG_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    CONDPAG_DT_ALT DATETIME,
    CONDPAG_USR_ALT INT
);
GO

-- FORMA_PAGAMENTO
CREATE TABLE FORMA_PAGAMENTO (
    FORMAPAG_ID INT IDENTITY(1,1) PRIMARY KEY,
    FORMAPAG_DESC NVARCHAR(255) NOT NULL,
    ATIVO BIT DEFAULT 1,
    FORMAPAG_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    FORMAPAG_DT_ALT DATETIME,
    FORMAPAG_USR_ALT INT
);
GO

-- PARCELA_CONDPAG
CREATE TABLE PARCELA_CONDPAG (
    PARCELA_ID INT IDENTITY(1,1) PRIMARY KEY,
    CONDPAG_ID INT NOT NULL,
    FORMAPAG_ID INT NOT NULL,
    PARCELA_PERCT DECIMAL(5,2) NOT NULL,
    PARCELA_NUM INT NOT NULL,
    PARCELA_PRAZO INT NOT NULL,
    ATIVO BIT DEFAULT 1,
    PARCELA_CONDPAG_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    PARCELA_CONDPAG_DT_ALT DATETIME,
    PARCELA_CONDPAG_USR_ALT INT
);
GO

-- CLIENTE
CREATE TABLE CLIENTE (
    CLIENTE_ID INT IDENTITY(1,1) PRIMARY KEY,
    CLIENTE_TIPO CHAR(1) NOT NULL,
    CLIENTE_NOME_RS NVARCHAR(255) NOT NULL,
    CLIENTE_APELIDO_FANTASIA NVARCHAR(255),
    CLIENTE_NASCIMENTO DATE NOT NULL,
    CLIENTE_CPF_CNPJ NVARCHAR(20) NOT NULL,
    CLIENTE_RG_INSCR NVARCHAR(20),
    CLIENTE_EMAIL NVARCHAR(255),
    CLIENTE_TELEFONE NVARCHAR(20),
    CLIENTE_ENDERECO NVARCHAR(255) NOT NULL,
    CLIENTE_NUM VARCHAR(10),
    CLIENTE_COMPLEMENTO VARCHAR(100),
    CLIENTE_BAIRRO NVARCHAR(100) NOT NULL,
    CLIENTE_CEP NVARCHAR(20) NOT NULL,
    CLIENTE_LIMITE_CREDITO FLOAT,
    CIDADE_ID INT NOT NULL,
    CONDPAG_ID INT NOT NULL,
    ATIVO BIT DEFAULT 1,
    CLIENTE_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    CLIENTE_DT_ALT DATETIME,
    CLIENTE_USR_ALT INT
);
GO

-- FORNECEDOR
CREATE TABLE FORNECEDOR (
    FORNECEDOR_ID INT IDENTITY(1,1) PRIMARY KEY,
    FORNECEDOR_TIPO CHAR(1),
    FORNECEDOR_NOME_RS NVARCHAR(255) NOT NULL,
    FORNECEDOR_APELIDO_FANTASIA NVARCHAR(255),
    FORNECEDOR_CPF_CNPJ NVARCHAR(20) NOT NULL,
    FORNECEDOR_RG_INSCR NVARCHAR(20),
    FORNECEDOR_NASCIMENTO DATE NOT NULL,
    FORNECEDOR_EMAIL NVARCHAR(255),
    FORNECEDOR_TELEFONE NVARCHAR(20),
    FORNECEDOR_ENDERECO NVARCHAR(255),
    FORNECEDOR_NUM VARCHAR(10),
    FORNECEDOR_COMPLEMENTO VARCHAR(100),
    FORNECEDOR_BAIRRO NVARCHAR(100),
    FORNECEDOR_CEP NVARCHAR(20),
    CIDADE_ID INT NOT NULL,
    CONDPAG_ID INT NOT NULL,
    LIMITE_CREDITO FLOAT,
    ATIVO BIT DEFAULT 1,
    FORNECEDOR_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    FORNECEDOR_DT_ALT DATETIME,
    FORNECEDOR_USR_ALT INT
);
GO

-- =============================================
-- NEW TABLES FOR NOTA DE ENTRADA
-- =============================================

-- NOTA_ENTRADA
CREATE TABLE NOTA_ENTRADA (
    NOTA_ENTRADA_ID INT IDENTITY(1,1) PRIMARY KEY,
    NOTA_ENTRADA_MODELO VARCHAR(10) NOT NULL,
    NOTA_ENTRADA_SERIE VARCHAR(10) NOT NULL,
    NOTA_ENTRADA_NUMERO VARCHAR(50) NOT NULL,
    NOTA_ENTRADA_DT_EMISSAO DATETIME NOT NULL,
    NOTA_ENTRADA_DT_CHEGADA DATETIME,
    NOTA_ENTRADA_VLR_FRETE DECIMAL(18, 2) DEFAULT 0,
    NOTA_ENTRADA_VLR_SEGURO DECIMAL(18, 2) DEFAULT 0,
    NOTA_ENTRADA_VLR_DESPESAS DECIMAL(18, 2) DEFAULT 0,
    NOTA_ENTRADA_MOT_CANCELAMENTO VARCHAR(99),
    FORNECEDOR_ID INT NOT NULL,
    CONDPAG_ID INT NOT NULL,
    ATIVO BIT DEFAULT 1,
    NOTA_ENTRADA_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    NOTA_ENTRADA_DT_ALT DATETIME,
    NOTA_ENTRADA_USR_ALT INT,
    
    -- Adicionando a restrição de unicidade aqui
    CONSTRAINT UQ_NOTA_ENTRADA_CHAVE UNIQUE (NOTA_ENTRADA_MODELO, NOTA_ENTRADA_SERIE, NOTA_ENTRADA_NUMERO,FORNECEDOR_ID)
);
GO

-- ITENS_NOTA_ENTRADA
CREATE TABLE ITENS_NOTA_ENTRADA (
    ITEM_NOTA_ID INT IDENTITY(1,1) PRIMARY KEY,
    NOTA_ENTRADA_ID INT NOT NULL,
    PRODUTO_ID INT NOT NULL,
    ITEM_NOTA_QTD DECIMAL(18, 4) NOT NULL,
    ITEM_NOTA_VLR_UNIT DECIMAL(18, 4) NOT NULL,
    ATIVO BIT DEFAULT 1,
    ITEM_NOTA_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    ITEM_NOTA_DT_ALT DATETIME,
    ITEM_NOTA_USR_ALT INT
);
GO

CREATE TABLE CONTAS_A_PAGAR
(
-- 1. Nova Chave Primária Surrogada (igual às suas outras tabelas)
    CONTA_PAGAR_ID INT IDENTITY(1,1) PRIMARY KEY,

    -- 2. Chave Estrangeira (agora pode ser NULA)
    NOTA_ENTRADA_ID INT NULL, 
    
    -- 3. Número da Parcela (para contas avulsas, pode ser 1)
    NUMERO_PARCELA INT NOT NULL DEFAULT 1,

    -- Demais colunas (seu código original)
    ID_FORNECEDOR        INT           NULL, -- Permitir nulo para contas avulsas sem fornecedor?
    DATA_EMISSAO         DATE          NOT NULL,
    DATA_VENCIMENTO      DATE          NOT NULL,
    VALOR_PARCELA        DECIMAL(18,2) NOT NULL,
    ID_FORMA_PAGAMENTO   INT           NOT NULL,
    ATIVO                BIT           NOT NULL DEFAULT 1,
    SITUACAO             INT           NOT NULL DEFAULT 0,  -- 0: Em aberto, 1: Pago
    JUROS                DECIMAL(18,2) NOT NULL DEFAULT 0,
    MULTA                DECIMAL(18,2) NOT NULL DEFAULT 0,
    DESCONTO             DECIMAL(18,2) NOT NULL DEFAULT 0,
    VALOR_PAGO           DECIMAL(18,2) NULL,
    DATA_PAGAMENTO       DATETIME      NULL,
    DATA_CADASTRO        DATETIME      NOT NULL DEFAULT GETDATE(),
    DATA_ULTIMA_EDICAO   DATETIME      NULL,
    MOTIVO_CANCELAMENTO  VARCHAR(100)  NULL,
);
GO

-- MARCA
CREATE TABLE MARCA (
    MARCA_ID INT IDENTITY(1,1) PRIMARY KEY,
    MARCA_NOME NVARCHAR(255) NOT NULL,
    ATIVO BIT DEFAULT 1,
    MARCA_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    MARCA_DT_ALT DATETIME,
    MARCA_USR_ALT INT NULL
);
GO

-- CATEGORIA
CREATE TABLE CATEGORIA (
    CATEGORIA_ID INT IDENTITY(1,1) PRIMARY KEY,
    CATEGORIA_NOME NVARCHAR(255) NOT NULL,
    ATIVO BIT DEFAULT 1,
    CATEGORIA_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    CATEGORIA_DT_ALT DATETIME,
    CATEGORIA_USR_ALT INT NULL
);
GO

-- UNIDADE_MEDIDA
CREATE TABLE UNIDADE_MEDIDA (
    UN_MEDIDA_ID INT IDENTITY(1,1) PRIMARY KEY,
    UN_MEDIDA_NOME NVARCHAR(100) NOT NULL,
    ATIVO BIT DEFAULT 1,
    UN_MEDIDA_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    UN_MEDIDA_DT_ALT DATETIME,
    UN_MEDIDA_USR_ALT INT NULL
);
GO

-- PRODUTO
CREATE TABLE PRODUTO (
    PRODUTO_ID INT IDENTITY(1,1) PRIMARY KEY,
    PRODUTO_NOME NVARCHAR(255) NOT NULL,
    PRODUTO_CODBAR NVARCHAR(50) NULL,
    UN_MEDIDA_ID INT NOT NULL,
    CATEGORIA_ID INT NOT NULL,
    MARCA_ID INT NOT NULL,
    PRODUTO_CUSTO DECIMAL(18,2) NOT NULL DEFAULT 0,
    PRODUTO_CUSTO_ANTERIOR DECIMAL(18,2) NOT NULL DEFAULT 0,
    PRODUTO_VENDA DECIMAL(18,2) NOT NULL DEFAULT 0,
    PRODUTO_QTD INT NOT NULL DEFAULT 0,
    PRODUTO_PERCENT_LUCRO DECIMAL(5,2) NOT NULL DEFAULT 0,
    ATIVO BIT DEFAULT 1,
    PRODUTO_DT_CRIACAO DATETIME DEFAULT GETDATE(),
    PRODUTO_DT_ALT DATETIME,
    PRODUTO_USR_ALT INT NULL
);
GO

-- NOVA TABELA DE ASSOCIAÇÃO N:N
CREATE TABLE PRODUTO_FORNECEDOR (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    PRODUTO_ID INT NOT NULL,
    FORNECEDOR_ID INT NOT NULL,
    CUSTO_ULT_COMPRA DECIMAL(10,2) NOT NULL,
    DT_ULT_COMPRA DATE NOT NULL,
    CUSTO_ATUAL_COMPRA DECIMAL(10,2) NOT NULL,
    ATIVO BIT DEFAULT 1,
);
GO

-- =============================================
-- FOREIGN KEYS
-- =============================================
ALTER TABLE CONTAS_A_PAGAR 
    -- 1. Constraint da Chave Estrangeira para NOTA_ENTRADA
    ADD CONSTRAINT FK_ContasAPagar_NotaEntrada FOREIGN KEY (NOTA_ENTRADA_ID) 
            REFERENCES NOTA_ENTRADA(NOTA_ENTRADA_ID)
            ON DELETE SET NULL, -- Se a nota for deletada, a conta vira "avulsa"

        -- 2. Constraint da Chave Estrangeira para FORNECEDOR
        CONSTRAINT FK_ContasAPagar_Fornecedor FOREIGN KEY (ID_FORNECEDOR) 
            REFERENCES FORNECEDOR(FORNECEDOR_ID),
        
        -- 3. Constraint da Chave Estrangeira para FORMA_PAGAMENTO
        CONSTRAINT FK_ContasAPagar_FormaPagamento FOREIGN KEY (ID_FORMA_PAGAMENTO) 
            REFERENCES FORMA_PAGAMENTO(FORMAPAG_ID),

        -- 4. Constraint de Unicidade (para evitar Nota 1 - Parcela 1 duplicada)
        CONSTRAINT UQ_ContaPagar_NotaParcela UNIQUE (NOTA_ENTRADA_ID, NUMERO_PARCELA);
GO

-- NEW: Foreign keys for Nota de Entrada
ALTER TABLE NOTA_ENTRADA
  ADD CONSTRAINT FK_NOTAENTRADA_FORNECEDOR FOREIGN KEY (FORNECEDOR_ID) REFERENCES FORNECEDOR(FORNECEDOR_ID),
      CONSTRAINT FK_NOTAENTRADA_CONDPAG    FOREIGN KEY (CONDPAG_ID)    REFERENCES COND_PAGAMENTO(CONDPAG_ID),
      CONSTRAINT FK_NOTAENTRADA_USR_ALT    FOREIGN KEY (NOTA_ENTRADA_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

ALTER TABLE ITENS_NOTA_ENTRADA
  ADD CONSTRAINT FK_ITEMNOTA_NOTAENTRADA FOREIGN KEY (NOTA_ENTRADA_ID) REFERENCES NOTA_ENTRADA(NOTA_ENTRADA_ID) ON DELETE CASCADE,
      CONSTRAINT FK_ITEMNOTA_PRODUTO     FOREIGN KEY (PRODUTO_ID)      REFERENCES PRODUTO(PRODUTO_ID),
      CONSTRAINT FK_ITEMNOTA_USR_ALT     FOREIGN KEY (ITEM_NOTA_USR_ALT)  REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO


-- FUNCIONARIO
ALTER TABLE FUNCIONARIO
  ADD CONSTRAINT FK_FUNCIONARIO_CIDADE  FOREIGN KEY (CIDADE_ID)           REFERENCES CIDADE(CIDADE_ID),
      CONSTRAINT FK_FUNCIONARIO_USR_ALT FOREIGN KEY (FUNCIONARIO_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

-- COND_PAGAMENTO
ALTER TABLE COND_PAGAMENTO
  ADD CONSTRAINT FK_CONDPAG_USR_ALT FOREIGN KEY (CONDPAG_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

-- FORMA_PAGAMENTO
ALTER TABLE FORMA_PAGAMENTO
  ADD CONSTRAINT FK_FORMAPAG_USR_ALT FOREIGN KEY (FORMAPAG_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

-- PARCELA_CONDPAG
ALTER TABLE PARCELA_CONDPAG
  ADD CONSTRAINT FK_PARCELA_CONDPAG          FOREIGN KEY (CONDPAG_ID)  REFERENCES COND_PAGAMENTO(CONDPAG_ID) ON DELETE CASCADE,
      CONSTRAINT FK_PARCELA_FORMAPAG         FOREIGN KEY (FORMAPAG_ID) REFERENCES FORMA_PAGAMENTO(FORMAPAG_ID) ON DELETE CASCADE,
      CONSTRAINT FK_PARCELA_CONDPAG_USR_ALT  FOREIGN KEY (PARCELA_CONDPAG_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

-- PAIS / ESTADO / CIDADE
ALTER TABLE PAIS
  ADD CONSTRAINT FK_PAIS_USR_ALT FOREIGN KEY (PAIS_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

ALTER TABLE ESTADO
  ADD CONSTRAINT FK_ESTADO_PAIS    FOREIGN KEY (PAIS_ID)     REFERENCES PAIS(PAIS_ID) ON DELETE CASCADE,
      CONSTRAINT FK_ESTADO_USR_ALT FOREIGN KEY (ESTADO_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

ALTER TABLE CIDADE
  ADD CONSTRAINT FK_CIDADE_ESTADO  FOREIGN KEY (ESTADO_ID)      REFERENCES ESTADO(ESTADO_ID) ON DELETE CASCADE,
      CONSTRAINT FK_CIDADE_USR_ALT FOREIGN KEY (CIDADE_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

-- CLIENTE / FORNECEDOR
ALTER TABLE CLIENTE
  ADD CONSTRAINT FK_CLIENTE_CIDADE  FOREIGN KEY (CIDADE_ID)    REFERENCES CIDADE(CIDADE_ID),
      CONSTRAINT FK_CLIENTE_CONDPAG FOREIGN KEY (CONDPAG_ID)   REFERENCES COND_PAGAMENTO(CONDPAG_ID),
      CONSTRAINT FK_CLIENTE_USR_ALT FOREIGN KEY (CLIENTE_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

ALTER TABLE FORNECEDOR
  ADD CONSTRAINT FK_FORNECEDOR_CIDADE  FOREIGN KEY (CIDADE_ID)    REFERENCES CIDADE(CIDADE_ID),
      CONSTRAINT FK_FORNECEDOR_CONDPAG FOREIGN KEY (CONDPAG_ID)   REFERENCES COND_PAGAMENTO(CONDPAG_ID),
      CONSTRAINT FK_FORNECEDOR_USR_ALT FOREIGN KEY (FORNECEDOR_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

-- MARCA / CATEGORIA / UNIDADE_MEDIDA
ALTER TABLE MARCA
  ADD CONSTRAINT FK_MARCA_USR_ALT FOREIGN KEY (MARCA_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

ALTER TABLE CATEGORIA
  ADD CONSTRAINT FK_CATEGORIA_USR_ALT FOREIGN KEY (CATEGORIA_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

ALTER TABLE UNIDADE_MEDIDA
  ADD CONSTRAINT FK_UNMEDIDA_USR_ALT FOREIGN KEY (UN_MEDIDA_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

-- PRODUTO
ALTER TABLE PRODUTO
  ADD CONSTRAINT FK_PROD_UNIDADE      FOREIGN KEY (UN_MEDIDA_ID)   REFERENCES UNIDADE_MEDIDA(UN_MEDIDA_ID),
      CONSTRAINT FK_PROD_CATEGORIA    FOREIGN KEY (CATEGORIA_ID)   REFERENCES CATEGORIA(CATEGORIA_ID),
      CONSTRAINT FK_PROD_MARCA        FOREIGN KEY (MARCA_ID)       REFERENCES MARCA(MARCA_ID),
      CONSTRAINT FK_PROD_USR_ALT      FOREIGN KEY (PRODUTO_USR_ALT) REFERENCES FUNCIONARIO(FUNCIONARIO_ID);
GO

-- PRODUTO_FORNECEDOR (associação N:N)
ALTER TABLE PRODUTO_FORNECEDOR
  ADD CONSTRAINT FK_PRODFORN_PRODUTO     FOREIGN KEY (PRODUTO_ID)    REFERENCES PRODUTO(PRODUTO_ID) ON DELETE CASCADE,
      CONSTRAINT FK_PRODFORN_FORNECEDOR  FOREIGN KEY (FORNECEDOR_ID) REFERENCES FORNECEDOR(FORNECEDOR_ID) ON DELETE CASCADE,
      CONSTRAINT UQ_PRODUTO_FORNECEDOR   UNIQUE (PRODUTO_ID, FORNECEDOR_ID);
GO

-- Índices auxiliares para busca
CREATE INDEX IX_PRODUTO_FORNECEDOR_PRODUTO     ON PRODUTO_FORNECEDOR (PRODUTO_ID);
CREATE INDEX IX_PRODUTO_FORNECEDOR_FORNECEDOR  ON PRODUTO_FORNECEDOR (FORNECEDOR_ID);
GO
